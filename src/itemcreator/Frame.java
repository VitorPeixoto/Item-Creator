package itemcreator;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Peixoto
 */
public class Frame extends javax.swing.JFrame {
    Item selectedItem;
    private boolean canSave;
    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        ToolBar = new javax.swing.JToolBar();
        saveToolLabel = new javax.swing.JLabel();
        ItemPanel = new javax.swing.JPanel();
        iconLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        itemIdLabel = new javax.swing.JLabel();
        itemNameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        rarityBox = new javax.swing.JComboBox();
        itemRarityLabel = new javax.swing.JLabel();
        vendableCheckBox = new javax.swing.JCheckBox();
        enchantableCheckBox = new javax.swing.JCheckBox();
        dropableCheckBox = new javax.swing.JCheckBox();
        priceField = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        possibleEnchantsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        enchantList = new javax.swing.JList();
        spriteScrollPanel = new javax.swing.JScrollPane();
        spriteLabel = new javax.swing.JLabel();
        spriteCheckBox = new javax.swing.JCheckBox();
        imageLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        openItemMenu = new javax.swing.JMenuItem();
        saveItemMenu = new javax.swing.JMenuItem();
        closeProgram = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Item Creator");

        ToolBar.setRollover(true);

        saveToolLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tools/saveIcon.png"))); // NOI18N
        saveToolLabel.setToolTipText("");
        saveToolLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveToolLabelMouseClicked(evt);
            }
        });
        ToolBar.add(saveToolLabel);

        ItemPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));

        iconLabel.setText("Ícone");
        iconLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        iconLabel.setPreferredSize(new java.awt.Dimension(45, 45));
        iconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconLabelMouseClicked(evt);
            }
        });

        itemIdLabel.setText("Item id: ");

        itemNameLabel.setText("Nome do item: ");

        rarityBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Comum", "Épico", "Mítico", "Lendário" }));
        rarityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rarityBoxActionPerformed(evt);
            }
        });

        itemRarityLabel.setText("Raridade do item: ");

        vendableCheckBox.setText("Vendável");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, priceLabel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), vendableCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.jdesktop.beansbinding.Binding binding2 = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, priceField, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), vendableCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding2);

        enchantableCheckBox.setText("Encantável");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, possibleEnchantsLabel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), enchantableCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        binding2 = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, enchantList, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), enchantableCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding2);

        dropableCheckBox.setText("Dropável");

        priceField.setText(" ");
        priceField.setEnabled(false);

        priceLabel.setText("Preço: ");
        priceLabel.setEnabled(false);

        possibleEnchantsLabel.setText("Encantos Possíveis: ");
        possibleEnchantsLabel.setEnabled(false);

        enchantList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        enchantList.setEnabled(false);
        jScrollPane1.setViewportView(enchantList);

        spriteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        spriteLabel.setText("Imagem do Sprite");
        spriteLabel.setEnabled(false);
        spriteLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        spriteLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spriteLabelMouseClicked(evt);
            }
        });
        spriteScrollPanel.setViewportView(spriteLabel);

        spriteCheckBox.setText("Sprite");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, spriteLabel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), spriteCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        imageLabel.setText("Imagem");
        imageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLabelMouseClicked(evt);
            }
        });

        descriptionLabel.setText("Descrição: ");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        jScrollPane2.setViewportView(descriptionTextArea);

        javax.swing.GroupLayout ItemPanelLayout = new javax.swing.GroupLayout(ItemPanel);
        ItemPanel.setLayout(ItemPanelLayout);
        ItemPanelLayout.setHorizontalGroup(
            ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ItemPanelLayout.createSequentialGroup()
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemIdLabel)
                            .addComponent(itemNameLabel)
                            .addComponent(itemRarityLabel)
                            .addComponent(enchantableCheckBox)
                            .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(dropableCheckBox)
                                .addComponent(vendableCheckBox))
                            .addComponent(descriptionLabel))
                        .addGap(34, 34, 34)
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ItemPanelLayout.createSequentialGroup()
                                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rarityBox, 0, 200, Short.MAX_VALUE)
                                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameField))
                                .addGap(27, 27, 27))
                            .addGroup(ItemPanelLayout.createSequentialGroup()
                                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priceLabel)
                                    .addComponent(possibleEnchantsLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(priceField)))))
                    .addComponent(jScrollPane2))
                .addGap(48, 48, 48)
                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemPanelLayout.createSequentialGroup()
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spriteScrollPanel)
                            .addGroup(ItemPanelLayout.createSequentialGroup()
                                .addComponent(spriteCheckBox)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(ItemPanelLayout.createSequentialGroup()
                        .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                        .addComponent(imageLabel)
                        .addGap(146, 146, 146))))
        );
        ItemPanelLayout.setVerticalGroup(
            ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemPanelLayout.createSequentialGroup()
                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemIdLabel))
                        .addGap(18, 18, 18)
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNameLabel)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rarityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(itemRarityLabel))
                    .addComponent(spriteCheckBox))
                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemPanelLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ItemPanelLayout.createSequentialGroup()
                                .addComponent(vendableCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(dropableCheckBox))
                            .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(priceLabel)))
                        .addGap(18, 18, 18)
                        .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ItemPanelLayout.createSequentialGroup()
                                .addGroup(ItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enchantableCheckBox)
                                    .addComponent(possibleEnchantsLabel))
                                .addGap(51, 51, 51)
                                .addComponent(descriptionLabel))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                    .addGroup(ItemPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(spriteScrollPanel)))
                .addContainerGap())
        );

        FileMenu.setText("File");

        openItemMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItemMenu.setText("Abrir Item");
        openItemMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemMenuActionPerformed(evt);
            }
        });
        FileMenu.add(openItemMenu);

        saveItemMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItemMenu.setText("Salvar Item");
        saveItemMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemMenuActionPerformed(evt);
            }
        });
        FileMenu.add(saveItemMenu);

        closeProgram.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeProgram.setText("Fechar Programa");
        closeProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProgramActionPerformed(evt);
            }
        });
        FileMenu.add(closeProgram);

        MenuBar.add(FileMenu);

        EditMenu.setText("Edit");
        MenuBar.add(EditMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ItemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ItemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openItemMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemMenuActionPerformed
        JFileChooser JFC = new JFileChooser();
        JFC.setFileFilter(new FileNameExtensionFilter("Item Data (*.itinfo)", "itinfo"));
        JFC.setBounds(0, 0, 500, 200);        
        JOptionPane.showMessageDialog(this, JFC);
        
        boolean ready = false;
        
        while(!ready) {
            if(JFC.getSelectedFile() != null) {
                try {
                    selectedItem = new Item(JFC.getSelectedFile());
                } catch (IOException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch(NullPointerException ex) {
                    selectedItem = null;
                }
                ready = true;
            }
            if(JFC.isVisible()) break;
        }    
    }//GEN-LAST:event_openItemMenuActionPerformed

    private void saveItemMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemMenuActionPerformed
        
    }//GEN-LAST:event_saveItemMenuActionPerformed

    private void imageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseClicked
            JFileChooser JFC = new JFileChooser();
            JFC.setFileFilter(new FileNameExtensionFilter("Image types (*.png, .jpg, .bmp, .gif, (...) )", "png", "jpg", "jpeg", "bmp", "gif"));
            JFC.setBounds(0, 0, 500, 200);        
            JOptionPane.showMessageDialog(this, JFC);

            boolean ready = false;

            while(!ready) {
                if(JFC.getSelectedFile() != null) {
                    try {
                        imageLabel.setText("");
                        imageLabel.setIcon(new ImageIcon(ImageIO.read(JFC.getSelectedFile()).getSubimage(0, 0, imageLabel.getWidth(), imageLabel.getHeight()), ""));                        
                        ready = true;
                    } catch (IOException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if(JFC.isVisible()) break;
            }  
    }//GEN-LAST:event_imageLabelMouseClicked

    private void saveToolLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveToolLabelMouseClicked
        saveItemMenuActionPerformed(null);
    }//GEN-LAST:event_saveToolLabelMouseClicked

    private void iconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconLabelMouseClicked
        JFileChooser JFC = new JFileChooser();
        JFC.setFileFilter(new FileNameExtensionFilter("Image types (*.png, .jpg, .bmp, .gif, (...) )", "png", "jpg", "jpeg", "bmp", "gif"));
        JFC.setBounds(0, 0, 500, 200);
        JOptionPane.showMessageDialog(this, JFC);

        boolean ready = false;

        while(!ready) {
            if(JFC.getSelectedFile() != null) {
                try {
                    iconLabel.setText("");
                    iconLabel.setIcon(new ImageIcon(ImageIO.read(JFC.getSelectedFile()).getSubimage(0, 0, iconLabel.getWidth(), iconLabel.getHeight()), ""));
                    ready = true;
                } catch (IOException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(JFC.isVisible()) break;
        }
    }//GEN-LAST:event_iconLabelMouseClicked

    private void rarityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rarityBoxActionPerformed
        rarityBox.setBackground(getColorByRarity(rarityBox.getSelectedIndex()));
    }//GEN-LAST:event_rarityBoxActionPerformed

    private void closeProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProgramActionPerformed
    System.exit(0);
    }//GEN-LAST:event_closeProgramActionPerformed

    private void spriteLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spriteLabelMouseClicked
        if(spriteLabel.isEnabled()) {
            JFileChooser JFC = new JFileChooser();
            JFC.setFileFilter(new FileNameExtensionFilter("Image types (*.png, .jpg, .bmp, .gif, (...) )", "png", "jpg", "jpeg", "bmp", "gif"));
            JFC.setBounds(0, 0, 500, 200);
            JOptionPane.showMessageDialog(this, JFC);

            boolean ready = false;

            while(!ready) {
                if(JFC.getSelectedFile() != null) {
                    spriteLabel.setIcon(new ImageIcon(JFC.getSelectedFile().getPath()));
                    ready = true;
                }
                if(JFC.isVisible()) break;
            }
        }
    }//GEN-LAST:event_spriteLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JPanel ItemPanel;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JMenuItem closeProgram;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JCheckBox dropableCheckBox;
    private javax.swing.JList enchantList;
    private javax.swing.JCheckBox enchantableCheckBox;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel itemIdLabel;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JLabel itemRarityLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameField;
    private javax.swing.JMenuItem openItemMenu;
    private javax.swing.JLabel possibleEnchantsLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JComboBox rarityBox;
    private javax.swing.JMenuItem saveItemMenu;
    private javax.swing.JLabel saveToolLabel;
    private javax.swing.JCheckBox spriteCheckBox;
    private javax.swing.JLabel spriteLabel;
    private javax.swing.JScrollPane spriteScrollPanel;
    private javax.swing.JCheckBox vendableCheckBox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private boolean canSave() {
        String emptyFields = new String();
        canSave = true;
        
        if(idField.getText().equals("")) {
            canSave = false;
            emptyFields = emptyFields.concat("\nId não especificado!");
        }        
        if(nameField.getText().equals("")) {
            canSave = false;
            emptyFields = emptyFields.concat("\nNome não especificado!");
        }
        if(vendableCheckBox.isSelected() && priceField.getText().equals("")) {
            canSave = false;
            emptyFields = emptyFields.concat("\nPreço não especificado!");
        }
        if(enchantableCheckBox.isSelected() && enchantList.getSelectedIndices().length == 0) {
            canSave = false;
            emptyFields = emptyFields.concat("\nEncantos possíveis não especificados!");
        }
        if(descriptionTextArea.getText().equals("")) {
            canSave = false;
            emptyFields = emptyFields.concat("\nColoque uma descrição, jovem!");
        }
        if(iconLabel.getIcon() == null) {
            canSave = false;
            emptyFields = emptyFields.concat("\nÍcone não especificado!");
        }
        if(imageLabel.getIcon() == null) {
           canSave = false;
            emptyFields = emptyFields.concat("\nImagem não especificada!"); 
        }
        if(spriteCheckBox.isSelected() && spriteLabel.getIcon() == null) {
            canSave = false;
            emptyFields = emptyFields.concat("\nSprite não especificado!");
        }
        if(!(emptyFields.length() == 0)) JOptionPane.showMessageDialog(null, emptyFields);
        return canSave;
    }

    private Color getColorByRarity(int selectedIndex) {
        int alpha = 210;
        switch(selectedIndex) {
            case 0:
                return null;
            case 1:
                return new Color(0, 109, 140, alpha);
            case 2:    
                return new Color(255, 246, 0, alpha);
            case 3:
                return new Color(79, 0, 65, alpha);
            default: return null;    
        }
    }
}
